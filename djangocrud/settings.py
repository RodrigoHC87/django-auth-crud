"""
Django settings for djangocrud project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path


#- Importamos los módulos necesarios para desplegar en producción. (RENDER)
import os
import dj_database_url


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

#- Al desplegar en producción, debemos usar este valor.
SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')

#* No usamos este valor en producción, por lo que lo comentamos.
#! SECRET_KEY = "django-insecure-khilnrbl!g2bm!(+#!euyax2^-n3jfdbi2v1c_wztisnsf!lj^"


# SECURITY WARNING: don't run with debug turned on in production!

#- Utilizamos lo siguiente, que si existe en el entorno, significa que se está ejecutando en producción(¡SOLO EN RENDER!) y no usaremos el debug y en caso de no existir, usaremos el debug.
DEBUG = 'RENDER' not in os.environ

#- No usamos esto en producción, por lo que lo comentamos.
# DEBUG = True


ALLOWED_HOSTS = []

#- Agregamos el hostname de la instancia de render, si existe.
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'tasks',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    #- Agregamos la siguiente linea para que funcione el servidor de archivos estáticos.
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = "djangocrud.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "djangocrud.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


# Database documentation https://docs.djangoproject.com/en/5.0/ref/settings/#databases


#- Nueva config. para Postgres en producción.
DATABASES = {
    'default': dj_database_url.config(
        default='postgresql://postgres:postgres@localhost:5432/mysite',
        conn_max_age=600
        )}

#- Comentamos esto, ya que no utilizamos sqllite3, sino postgres.
# DATABASES = {
#     "default": {
#        "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"


#- Agregamos estas lineas para que funcione el servidor de archivos estáticos.
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


#- Usamos esto para proteger rutas que solo pueden accederse
#- por usuarios logueados. Con esto redireccionamos a la pagina de login en caso de no estar logueado.
LOGIN_URL = '/signin'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
